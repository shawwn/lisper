import sys
import types
# from typing import Any, Callable, Generic, Hashable, Iterable, NamedTuple, Sequence, Sized, TypeVar, overload
from .typing import *

from ._stubs import SingleDispatchCallable

def singledispatch(func: Callable[P, T]) -> SingleDispatchCallable[P, T]: ...

class SingleDispatchMethod(Generic[P, T]):
    dispatcher: SingleDispatchCallable[P, T]
    func: Callable[P, T]
    def __init__(self, func: Callable[P, T]) -> None: ...
    @property
    def __isabstractmethod__(self) -> bool: ...
    @overload
    def register(self, cls: type[Any], method: None = ...) -> Callable[[Callable[P, T]], Callable[P, T]]: ...
    @overload
    def register(self, cls: Callable[P, T], method: None = ...) -> Callable[P, T]: ...
    @overload
    def register(self, cls: type[Any], method: Callable[P, T]) -> Callable[P, T]: ...
    def __get__(self, obj: S, cls: Optional[Type[S]] = ...) -> Callable[P, T]: ...

# def singledispatchmethod(func: Callable[P, T]) -> SingleDispatchMethod[P, T]: ...
singledispatchmethod = SingleDispatchMethod